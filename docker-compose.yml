networks:
    pong-network:
        name: pong-network
        driver: bridge

services:
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "443:443"
      - "80:80"
    # volumes:
      # - ./nginx:/etc/nginx/templates
      # - ./frontend/dist:/usr/share/nginx/html
      # - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # - ./nginx/generate-cert.sh:/docker-entrypoint.d/generate-cert.sh
    depends_on:
      - app #backend
      # - frontend
    networks:
      - pong-network

  app:
    build:
      context: ./pong_backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      - db
    networks:
      - pong-network

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - pong-network

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   volumes:
  #     - frontend-dist:/app/dist
  #   entrypoint: [ "sh", "-c", "npm run build" ]
  #   networks:
  #     - pong-network

volumes:
  db-data:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/db-data
      o: bind
  frontend-dist:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/frontend/dist
      o: bind
